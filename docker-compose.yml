version: '3.8'
services:
  redis:
    image: redis:6.2-alpine
    container_name: redis-nt
    ports:
      - "6379:6379"
    command: redis-server --requirepass "" --notify-keyspace-events Ex
    networks:
      - app-nt
    volumes:
      - redis_data:/data/db
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper-nt
    ports:
      - "2181:2181"
    networks:
      - app-nt

  kafka:
    image: wurstmeister/kafka
    container_name: kafka-nt
    ports:
      - "9092:9092"
      - "7071:7071"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INSIDE://kafka:9092
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
    depends_on:
      - zookeeper
    networks:
      - app-nt
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "kafka:9092"]
      interval: 30s
      timeout: 10s
      retries: 5
      
  mailhog:
    container_name: mailHog_nt
    image: mailhog/mailhog:latest
    ports:
      - "8025:8025"
      - "1025:1025"
    networks:
      - app-nt    

  app:
    build: .
    container_name: voto-app
    ports:
      - "8081:8081"
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
      db:
        condition: service_started
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/voto_db
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: ""
      SPRING_PROFILES_ACTIVE: hml
    networks:
      - app-nt

  db:
    image: postgres:13-alpine
    container_name: postgres-nt
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: voto_db
    ports:
      - "5432:5432"
    networks:
      - app-nt
    volumes:
      - postgres_data:/data/db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  app-nt:
    driver: bridge


volumes:
  postgres_data:
  redis_data:
